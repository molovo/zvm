#!/usr/bin/env zsh

# Set some global variables
typeset -g ZVM_DIR=${ZVM_DIR:-"${ZDOTDIR:-$HOME}/.zvm"}
typeset -g ZVM_SRC_DIR=${ZVM_SRC_DIR:-"${ZVM_DIR}/src"}
typeset -g ZVM_LOG_DIR=${ZVM_LOG_DIR:-"${ZVM_DIR}/log"}
typeset -g ZVM_COMPILE_DIR=${ZVM_COMPILE_DIR:-"${ZVM_DIR}/compiled"}

###
# Output version information
###
function _zvm_version() {
  echo '0.1.0'
}

###
# Output usage information
###
function _zvm_usage() {
  echo ZVM $(_zvm_version)
  echo
  echo $(color yellow 'Usage:')
  echo '  zvm [options] <command>'
  echo
  echo $(color yellow 'Commands:')
  echo '  current              Output the current version'
  echo '  dir [<version>]      Output the version for the current directory, or'
  echo '                       set it to the specified version'
  echo '  default [<version>]  Output the default version, or set the default'
  echo '                       to the specified version'
  echo '  install <version>    Install the specified ZSH version'
  echo '  list                 List available versions'
  echo '  remove <version>     Remove the specified ZSH version'
  echo '  use [<version>]      Switch to the specified ZSH version, or the'
  echo '                       version defined in .zvmrc, or the default'
}

###
# Install the directories ZVM needs to operate
###
function _zvm_self_install() {
  if [[ -d ${ZVM_DIR} ]]; then
    echo $(color red bold "${ZVM_DIR} already exists. Is ZVM already installed?")
    echo "Remove ${ZVM_DIR} to continue"
    exit 1
  fi

  revolver start 'Creating ZVM directory structure'
  mkdir -p ${ZVM_DIR}/{compiled,src,log}

  revolver update 'Cloning ZSH source'
  local repo='https://github.com/zsh-users/zsh'
  if ! git clone "$repo" "${ZVM_SRC_DIR}" >/dev/null 2>&1; then
    echo $(color red bold "Failed to download ZSH source")
    exit 1
  fi

  revolver stop
}

###
# Check if a ZSH version is installed
###
function _zvm_is_installed() {
  local version="$1"

  _zvm_list --installed --simple | grep -E "^$version$" >/dev/null 2>&1
}

###
# Check if a ZSH version is valid
###
function _zvm_is_valid() {
  local version="$1"

  _zvm_list --simple | grep -E "^$version$" >/dev/null 2>&1
}

###
# List available ZSH versions
###
function _zvm_list() {
  local installed prerelease search current default version versions out

  zparseopts -D \
    i=installed -installed=installed \
    p=prerelease -prerelease=prerelease \
    s=simple -simple=simple

  # If ZVM hasn't set itself up, do it now
  if [[ ! -d "${ZVM_DIR}" ]]; then
    _zvm_self_install
  fi

  [[ -f "${ZVM_DIR}/.current" ]] && current=$(cat "${ZVM_DIR}/.current")
  [[ -f "${ZVM_DIR}/.default" ]] && default=$(cat "${ZVM_DIR}/.default")

  # Our basic search command
  # Matches all tags in the source repository matching 'zsh-x.x.x'
  search="git tag | grep -E '^zsh-[0-9]+\.[0-9]+(\.[0-9]+)?$'"

  # If --prerelease is specified, we extend the search to match 'zsh-x.x.x-*'
  if [[ -n $prerelease ]]; then
    search="git tag | grep -E '^zsh-[0-9]+\.[0-9]+(\.[0-9]+)?(-.*)?'"
  fi

  # If --installed is specified, we filter the list of results to
  # the list of directories in ${ZVM_DIR}/compiled
  if [[ -n $installed ]]; then
    search="$search | grep -E '^zsh-(${(j.|.)${:-${(@f)$(ls "${ZVM_DIR}/compiled")}}//./\.})$'"
  fi

  # cd to the source directory, and ensure it's up to date
  cd ${ZVM_SRC_DIR}
  git fetch origin

  # Execute the search command and store the results in an array
  versions=($(eval "$search") 'system')

  # If --simple is specified, just print the list straight to screen
  if [[ -n $simple ]]; then
    echo ${(@F)^versions//zsh-/}
    return
  fi

  # Loop through each of the versions
  for version in ${^versions//zsh-/}; do
    flags=""

    if [[ $version = $current ]]; then
      flags+=$(color yellow '➾ ')
    else
      flags+='  '
    fi

    if [[ $version = $default ]]; then
      flags+=$(color magenta '• ')
    else
      flags+='  '
    fi

    # if _zvm_is_installed $version; then
    if [[ -d "${ZVM_COMPILE_DIR}/${version}" ]]; then
      flags+=$(color green '✔ ')
    else
      flags+='  '
    fi

    echo "$flags $version"
  done

  echo
  echo "$(color yellow '➾ ') current"
  echo "$(color magenta '• ') default"
  echo "$(color green '✔ ') installed"
}

###
# Set the default version to use
# If no version is passed, return the current default
###
function _zvm_default() {
  local version quiet

  zparseopts -D q=quiet -quiet=quiet

  version="$1"

  if [[ -z $version ]]; then
    if [[ -f "${ZVM_DIR}/.default" ]]; then
      echo $(cat "${ZVM_DIR}/.default")
      return
    fi

    [[ -z $quiet ]] && echo $(color yellow 'No default set. Run `zvm default <version>`')
    return 1
  fi

  if ! _zvm_is_installed $version; then
    _zvm_install $version
  fi

  echo $version >! "${ZVM_DIR}/.default"

  echo "$(color green '✔') Default set to ZSH version $version"
}

###
# Output the current version
###
function _zvm_current() {
  local quiet

  zparseopts -D q=quiet -quiet=quiet

  if [[ -f "${ZVM_DIR}/.current" ]]; then
    echo $(cat "${ZVM_DIR}/.current")
    return
  fi

  [[ -z $quiet ]] && echo $(color yellow 'No version set. Run `zvm use`')
  return 1
}

###
# Remove an installed ZSH version
function _zvm_remove() {
  local version="$1"

  if ! _zvm_is_installed $version; then
    echo $(color red bold "ZSH version $version is not installed")
    exit 1
  fi

  if [[ "$(_zvm_current --quiet)" = "$version" ]]; then
    _zvm_unuse $version
  fi

  if [[ "$(_zvm_default --quiet)" = "$version" ]]; then
    rm "${ZVM_DIR}/.default"
  fi

  [[ -d "${ZVM_COMPILE_DIR}/${version}" ]] && rm -rf "${ZVM_COMPILE_DIR}/${version}"

  echo "$(color green '✔') ZSH version $version removed"
}

###
# Set the version to use within the current directory
# If no version is passed, return the current version for this directory
###
function _zvm_dir() {
  local version quiet

  zparseopts -D q=quiet -quiet=quiet

  version="$1"

  if [[ -z $version ]]; then
    local filename=".zvmrc"
    while [[ $(realpath $filename) != '/.zvmrc' ]]; do
      if [[ -f $filename && -r $filename ]]; then
        echo $(cat $filename)
        return
      fi

      filename="../$filename"
    done

    [[ -z $quiet ]] && echo $(color yellow "No version set for $PWD. Run \`zvm use <version>\`")
    return 1
  fi

  if ! _zvm_is_installed $version; then
    _zvm_install $version
  fi

  echo $version >! "${PWD}/.zvmrc"
  echo "$(color green '✔') ZSH version $version set for directory $PWD"
}

###
# Unset the currently selected version
###
function _zvm_unuse() {
  # Remove links to the current version
  [[ -L "${ZVM_DIR}/bin" ]] && rm "${ZVM_DIR}/bin"
  [[ -L "${ZVM_DIR}/scripts" ]] && rm "${ZVM_DIR}/scripts"
  [[ -L "${ZVM_DIR}/site-functions" ]] && rm "${ZVM_DIR}/site-functions"
  [[ -L "${ZVM_DIR}/functions" ]] && rm "${ZVM_DIR}/functions"
  [[ -L "${ZVM_DIR}/lib" ]] && rm "${ZVM_DIR}/lib"
  [[ -L "${ZVM_DIR}/man" ]] && rm "${ZVM_DIR}/man"

  # Remove the current defined version
  [[ -f "${ZVM_DIR}/.current" ]] && rm "${ZVM_DIR}/.current"
}

###
# Use a specific ZSH version.
# If no version is specified, the default is used.
# If the chosen version is not installed, it is done now.
###
function _zvm_use() {
  local version="$1"

  # If no version is provided, check for a .zvmrc
  if [[ -z $version ]]; then
    version=$(_zvm_dir --quiet)
  fi

  # If no version is provided, try and find the default
  if [[ -z $version || $version = "default" ]]; then
    version=$(_zvm_default --quiet)
  fi

  # If we still don't have a version, exit with an error
  if [[ -z $version ]]; then
    echo $(color red bold 'You must specify a version, or set a default first using `zvm default <version>`')
    exit 1
  fi

  if [[ $version = $(_zvm_current --quiet) ]]; then
    echo "$(color green '✔') ZSH version $version is already the current version"
    return
  fi

  if [[ $version = 'system' ]]; then
    _zvm_unuse
    echo $version > "${ZVM_DIR}/.current"
    echo "$(color green '✔') Reverted to system ZSH version"
    return
  fi

  # If ZVM hasn't set itself up, do it now
  if [[ ! -d "${ZVM_DIR}" ]]; then
    _zvm_self_install
  fi

  # If the requested version is not installed, do it now
  if [[ ! -d "${ZVM_COMPILE_DIR}/$version" ]]; then
    _zvm_install $version
  fi

  # Remove existing links first
  _zvm_unuse $version

  # Store the current version
  echo $version > "${ZVM_DIR}/.current"

  # Create new symlinks
  local share="${ZVM_COMPILE_DIR}/${version}/share"
  ln -s "${ZVM_COMPILE_DIR}/${version}/bin" "${ZVM_DIR}/bin"
  ln -s "${share}/zsh/${version}/scripts" "${ZVM_DIR}/scripts"
  ln -s "${share}/zsh/${version}/functions" "${ZVM_DIR}/functions"
  ln -s "${share}/zsh/site-functions" "${ZVM_DIR}/site-functions"
  ln -s "${share}/man" "${ZVM_DIR}/man"
  ln -s "${ZVM_COMPILE_DIR}/${version}/lib" "${ZVM_DIR}/lib"

  echo "$(color green '✔') Switched to ZSH version $version"
}

###
# Install a ZSH version
###
function _zvm_install() {
  local version="$1" logfile

  # If ZVM hasn't set itself up, do it now
  if [[ ! -d "${ZVM_DIR}" ]]; then
    _zvm_self_install
  fi

  # Set up the logfile path
  logfile="${ZVM_LOG_DIR}/$(date '+%Y%m%d-%H%M%S')-${version}-installation.log"

  if [[ ! -d "${ZVM_DIR}" ]]; then
    _zvm_self_install
  fi

  # Check if the requested version is already installed
  if _zvm_is_installed $version; then
    echo $(color red bold "ZSH version $version already installed. Remove it first")
    exit 1
  fi

  if ! _zvm_is_valid $version; then
    echo $(color red bold "ZSH version $version is not recognised. See \`zvm list\`")
    exit 1
  fi

  # Make sure we exit if we hit an error
  setopt ERR_EXIT

  # Clear the logfile
  cat /dev/null >! $logfile

  revolver start "Installing ZSH $version"
  cd ${ZVM_SRC_DIR}

  # Remove any local changes if they exist
  revolver update 'Removing artefacts from previous build...'
  if ! git reset --hard >>$logfile 2>&1; then
    echo $(color red bold "Failed to remove artefacts from previous build")
    echo "See $logfile for details"
    exit 1
  fi
  echo "$(color green '✔') Removed artefacts from previous build"

  # Checkout the correct branch
  revolver update "Checking out $version..."
  if ! git checkout zsh-${version} >>$logfile 2>&1; then
    echo $(color red bold "Failed to checkout zsh-$version tag")
    echo "See $logfile for details"
    exit 1
  fi
  echo "$(color green '✔') Checked out zsh-$version"

  # Create and cd to the compilation directory
  revolver update "Creating compilation directory..."
  if ! mkdir -p "${ZVM_COMPILE_DIR}/$version" >>$logfile 2>&1; then
    echo $(color red bold "Failed to create compilation directory")
    echo "See $logfile for details"
    exit 1
  fi
  echo "$(color green '✔') Created compilation directory at ${ZVM_COMPILE_DIR}/$version"

  # Run configuration scripts
  revolver update 'Running configuration scripts...'
  if ! ./Util/preconfig >>$logfile 2>&1; then
    echo $(color red bold "Failed at preconfigure step")
    echo "See $logfile for details"
    exit 1
  fi
  echo "$(color green '✔') Preconfigure scripts completed successfully"

  if ! ./configure --prefix="${ZVM_COMPILE_DIR}/$version" >>$logfile 2>&1; then
    echo $(color red bold "Failed at configure step")
    echo "See $logfile for details"
    exit 1
  fi
  echo "$(color green '✔') Configure scripts completed successfully"

  # Run compile script
  revolver update "Compiling..."
  if ! make >>$logfile 2>&1; then
    echo $(color red bold "Failed at compilation step")
    echo "See $logfile for details"
    exit 1
  fi
  echo "$(color green '✔') Build complete"

  # Check build
  revolver update "Checking build..."
  if ! make check >>$logfile 2>&1; then
    echo $(color red bold "Post build checks failed")
    echo "See $logfile for details"
    exit 1
  fi
  echo "$(color green '✔') Post-build checks passed"

  # Install
  revolver update "Installing binaries..."
  if ! make install.bin >>$logfile 2>&1; then
    echo $(color red bold "Installation of binaries failed")
    echo "See $logfile for details"
    exit 1
  fi
  echo "$(color green '✔') Installed binaries"

  # Install
  revolver update "Installing modules..."
  if ! make install.modules >>$logfile 2>&1; then
    echo $(color red bold "Installation of modules failed")
    echo "See $logfile for details"
    exit 1
  fi
  echo "$(color green '✔') Installed modules"

  # Install
  revolver update "Installing functions..."
  if ! make install.fns >>$logfile 2>&1; then
    echo $(color red bold "Installation of functions failed")
    echo "See $logfile for details"
    exit 1
  fi
  echo "$(color green '✔') Installed functions"

  # if ! builtin type yodl >/dev/null 2>&1; then
  #   echo "$(color yellow '‼') yodl not installed. Skipping installation of man pages"
  # else
  #   # Install
  #   revolver update "Installing man pages..."
  #   if ! make install.man >>$logfile 2>&1; then
  #     echo $(color red bold "Installation of man pages failed")
  #     echo "See $logfile for details"
  #     exit 1
  #   fi
  #   echo "$(color green '✔') Installed man pages"
  # fi

  revolver stop
  echo "$(color green '✔') Successfully installed ZSH $version"
}

###
# The main zvm function
###
function _zvm() {
  local help version ctx="$1"

  zparseopts -D \
    h=help -help=help \
    v=version -version=version

  # If --help is specified, output usage information and exit
  if [[ -n $help ]]; then
    _zvm_usage
    exit
  fi

  # If --version is specified, output version information and exit
  if [[ -n $version ]]; then
    _zvm_version
    exit
  fi

  case $ctx in
    use )
      shift
      _zvm_use "$@"
      ;;
    default )
      shift
      _zvm_default "$@"
      ;;
    current )
      shift
      _zvm_current "$@"
      ;;
    install )
      shift
      _zvm_install "$@"
      ;;
    list )
      shift
      _zvm_list "$@"
      ;;
    remove )
      shift
      _zvm_remove "$@"
      ;;
    dir )
      shift
      _zvm_dir "$@"
      ;;
    remove )
      shift
      _zvm_remove "$@"
      ;;
    * )
      echo "\033[0;31mUnrecognised command $ctx\033[0;m"
      exit 1
  esac
}

_zvm "$@"
